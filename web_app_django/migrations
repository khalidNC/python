6th Step: Telling django to migrate/synchronize database with the models we created

1. Store the model objects in our database:
      a. Sqlite3: Look at the db.sqlite3 file in the source directory. This is a blank sqlite database that django automatically created. Sqlite is a very simple light weight database that we often use in small applications that we run on mobile devices. But it is not suitable for the enterprise web applications that has thousands of users and it does not have features like security and concurrency, in those situation we use database like MYSQL, SQL server by Microsoft and so on. The good thing is django supports all of this database engines.

      b. Now to work with sqlite3 database, search 'db browser for sqlite' in google and navigate to their site: https://sqlitebrowser.org/ this is a simple application that we can download the extension and use this to open an sqlite database. Here we can create new database or opena existing one. 

      c. We opne the our database just drag and drop the file to open. We can there is no table yet. That means we need to create a couple of tables. In order to store movies and generas in this database. To be noted: when we are using django we do not have to manually design this table, django automatically creates that for us based on our models.

      d. Tables in sqlite: So every time we create new model classes or modified the existing one, we tell django to compare our model classes with our database. Django will look at our database it will figure out what tables and columns we have, then it will calculate the difference between our model classes and our database tables. and based on that, it will create a migration, a migration is essensially a python file that include some codes. When we run that it will synchronize our database with our model classes. Let's take a look.

            i. Let's open the terminal
            ii. and run: python3 manage.py makemigrations
            iii. Then it shows innitially 'No changes detected'. Because by default django is not aware of our model classes
            iv. So first step is to register our movies app with django. Let's see how do this:
                  1. In our project, inside the vidjan package, open settings.py this file contain various configarations and settings. One of the settings is INSTALLED_APPS and few apps are installed by default.
                        a. First one is admin: and this creates admin pannel for us
                        b. Then Auth: Which is authentication framework, with this we can authenticate users, and can see whochave the permission to perform various tasks.
                        c. Then contenttypes: A framework for creating generic relationship between model classes.
                        d. Sessions: This framework allows us to temporarily store data about the current users.
                        e. Messages: We have messaging framework, and use that in situation like when user creates new movie and we display the message like 'The movie is successfully created'.
                        f. Then staticfiles: Which is use for managing static files like css files, images and so on.
                        Note: In most applications, we need pretty much all these installed apps, but if do not need any of this you can delet that from the list.
                  2. Now we need to register our movies app here, so that django can keep track of our model classes in that app.
                        a. So back to our movies folder and open the apps.py file
                        b. here we have various configaration settings for the movies app.
                        c. Look at the class name 'MoviesConfig' this class is in apps module of the movies package. So to register the movies app with django we need to provied the complete path of this class.
                        d. So bakc to the settings.py in vidjan package and we add MoviesConfig class full path first movies package then apps module then the class at the bottom. And save the changes.
                              
                              Codes:
                                    INSTALLED_APPS = [
                                      'django.contrib.admin',
                                      'django.contrib.auth',
                                      'django.contrib.contenttypes',
                                      'django.contrib.sessions',
                                      'django.contrib.messages',
                                      'django.contrib.staticfiles',
                                      'movies.apps.MoviesCongif'
                                    ]
            v. Go back to the terminal again and run the makemigrations command once again: python3 manage.py makemigrations
            vi. This time django has detected the changes in the movies app, so it created a migration that is inside movies/migrations/0001_initial.py this file. 
            vii. Let's have a quick look at this migration in this file:
                  1. Here we have class called Migration
                  2. And in this class we have a couple of oparations for bringing our database up to date with our current model classes. 
                        a. The first oparation: For creating a model we can see the name is set to genera. And the fields of genera are id and name. Note: In out code we only specify name not id, but django automatically creates this for us. And it ensures that every object has id property, that uniquely identifies that object. 

                        b. The secound oparations: In similarly we have another create model oparation for creating the movie table in this table we are going to have the files along with the id that we did not mention in our code but django takes care of this.
                  3. Now this migration has not executed yet it simply describe the oparations that we need to be perfomed in the database to brieng it up to date with our current model classes. 
                  4. So next step is to run this migration:
                        a. Before run the migration let's see one thing;
                            - Open the terminal
                            - and run: python3 manage.py runserver
                            - OutPut: we see an error like, we have 16 unapplied migrations. This basically means, we have migrations that need to be executed. Eariler we had 15 unapplied now 16.
                            So let's stop server 'control c'
                        b. And run: python3 manage.py migrate
                            - This will run all the pending migrations we have. We can see all the migrations are applied.
                            - OutPut: As we can see each of migrations has a prefix with the name of the app that contains it.
                            - So here we have migration for contenttypes app, auth app, 3 migartions for admin app.
                            - After all the migartions at the bottopm we can see migartion for movies app.
                  5. Now open the Sqlite databse once again, we can see we have a total numbers of tables. Each of the tables is prefix with the name of the app that contains it. So we can see 2 tables for movies app, movies_genera and movies_movie. And we can always overwrite anytime. If we expand the move table we can see the columns, for id, rease date, and so on. S owe do not have to create any table manually, django does for us.
                  6. We have also a table for django_migrations, django uses this for keeping track of the migrations that are applied on the database.
                  7. So go to browse data tab and select the django_migration table. And we see the list of all migrations currently applied. If you scroll down and can see the migration for the move in the list with it's name along with the date time.

2. In next step:7 it shows if we update the model classes what happen in database.
