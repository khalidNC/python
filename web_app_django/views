4th step: The view function

1. Creation of first view function:
      a. Go to the movies directory and open the views.py file
      b. Define a function 'index'. This name is arbitrary, we could call it anything but usually we use the word index for naming the function that represents a main page of an app. For example, /movies app page when we send a request to the address to the endpoint our index function is going to get call. So index represents the main page of an app. 
            Codes:
                  from django.shortcuts import render

                  # Create view function and all our view functions should take request parameter.
                  def index(request): 

                  '''
                  Again the name 'request' is arbitrary but the object that pass to this function is an http request object. And we are not going to call this function, Django will take care of doing this. So when we send an http request to an endpoint, django will figure out based on some configaration what view function should be called.

                  Now every view function should return an http response. So on the top, let's import the HttpResponse class from django.http module.

                  And in this function, we will return http response object and here we will pass some plain text 'Hello world'.

                  Save the changes. This is our first view. Now we need to map this to a url.
                  '''

                  from django.http import HttpResponse
                  from django.shortcuts import render

                  def index(request):
                    return HttpResponse("Hello World")


2. Map the view function to a url:
      a. Back to movies directory and add a new py file by convention the name should be urls.py
      b. Here in the file, create a variable urlpatterns and set a list here, again this is Django convetion to follow.
      c. In this list, we add objects that map url endpoints or view function.
      d. And to do this we use path function in Django. So on the top import path function from django.urls
      e. then we call path function to create path object in the list.
            the first argument - should specify url endpoint:
                1. here we will pass an empty string. This represents the root of this app. 
                2. For exmple: in our movies app, we are going to have some url endpoints like,
                      movies/ - this is root url
                      movies/1/details - here we assume 1 is the id of a given movie
                3. So the empty string represents the root url
                4. Do not wory about the 'movies' prefix we will add this in the next step. From the prospective of this app, we do not care what the prefix is. Because we should design this app for reusability, may be another developer wants to download the app from pypi.org and put it under a url like movies_collections/ so this app should not care where it is hosted. So here we should use relative urls. 
            then second argument - map this to a view function:
                1. To do so we need to import the index function that we created earlier. that is in our views module
                2. Look at the views.py file in the movies directory.
                3. so you might think, you can import view module like, 'import views'. While this work in python but this will not work in Django because this is how django loads the modules. So we should use a relative import statement. So 'from . (the priod represent current directory) import views'
                4. Now back to the path function and as the second argument we need to pass a reference to a view function that is views.index 
                5. Note: we do not call the index() function we just pass a reference to the index function.
      f. At the run time when a user sends an http request to this(the empty string[represents root url of the app] in the path function) endpoint then django will take care of calling this path function and give it an http request object. 
      g. Also as a best practice we should name this url endpoint. So we pass a keyword=argument: name="index".
      h. Now save the changes. So we have now:
                                                1. A defined variable urlpatterns
                                                2. that contains one or more path objects that map url endpoints to view functions. We reffer this as a url configuration. So every app should have a url configuration.

          Codes:
                from . import views
                from django.urls import path

                urlpatterns = [
                  path("", views.index, name="index"),
                ]

3. Main app Vidjan:
      a. So we have done with the url configuration so far. But our main app, the vidjan app has no knowledge of the movies app. So if we head over to the local host port 8000/movies nothing will going to be happen. Our Django application is not aware of that.
      b. No we need to go to the main app, vidjan directory
      c. once again here in the directory we urls.py file, that defines the url configuration for our main app.
            i. Here in the file we see:
                Codes:
                        from django.contrib import admin
                        from django.urls import path

                        urlpatterns = [
                          path("admin/", admin.site.urls),
                        ]
            ii. We have urlpatterens variable like in urls.py file under 'movies' directory. By convention django looks for this variable when starting our django project.
            iii. Now in this varibale we have a path object that maps anything that starts with admin to admin.site.urls
            iv. So every django project comes with an adminstrative panel that is a separate independent app on it's own.
            v. Now we need add a new path object here, we are going to tell our Vidjan app that any path starts with 'movies/' should be handed off to the url configuration in the 'movies' app.
            vi. So here in the import statement(from django.urls import path) import another function called include
            vii. And as second argument we call the inclue() function
            viii. And pass a string that specify the name of the module that contains the url configuration for the movies app. That is movies.urls [Note: navigate to movies directory and there is the urls.py that is why we pass string "movies.urls" but not need to add .py django will automatically append the extension and load the module.]
            ix. So with this line of code whenever we send a request that starts with 'movies' django will chop off the prefix("movies/") and send the remaining string to this("movies.urls") module. That is the reason in the url configuration for the movies app we use an empty string to represent the root of this app. 
            x. Now save the changes and restart our web server. Terminal command: python3 manage.py runserver
                Codes:
                        from django.contrib import admin
                        from django.urls import path, include

                        urlpatterns = [
                          path("admin/", admin.site.urls),
                          path("movies/", include("movies.urls"))
                        ]

4. After run the server get page not found:
      a. We see page not found, and we will fix this in next step no 5
      b. but if you head over to /movies you will see the 'Hello Word' text and this verifies that we successfully mapped a url endpoint to a view function.

Next step will be in this models folder.
