10th Step: Buid API from the database

1. Earlier we built a view function to response to the request to movies/ endpoint. An currently we are only displaying text "Hello Word" and next we will display the the list of movies in our database.

    a. Open the models.py module there is a Movie class. We derived this class from the Model class in django. 
    b. But why? Because this Model class gives us a bunch of methods for creating, retriving, updating, or deleting object from our database. So if you want to store movie object in our database, you simply call one of these methods[save()] in our database. This save method internally take care of generating the right SQL statement to update our SQL database. This is we called database abstraction API. 
    c. So this Model class give us an API, Application Programming Interface. And this API abstracts away the complexity of working with database. 

2. Now, see how to use this API to get the list of movie object from our database:
    a. Let's open views.py module under the movies package
    b. We already created index function that currently returning text "Hello Word" on the /movies page.
    c. Now we are going to use our model api to get all the movie objects from the database.
    d. First, import Movie class from the models module from the current folder movies package.

        Codes:
                from django.shortcuts import render
                from django.http import HttpResponse
                # import Movie class
                from .models import Movie

                def index(request):
                  # simply write movie.objects.all() with this statement we get all the movie objects from the database
                  Movie.objects.all()
                  # Method for filtering record
                  Movie.bojects.filter(release_year=1998)
                  # Method for geting single object
                  Movie.objects.get(id=1)
                  return HttpResponse("Hello Word")

    e. Call thye movie objects all to get all the movie objects in the database. So when we call this at some point django is going to generate the SQL statement like this;
        i. SELECT * FROM movies_movie

    g. We also have a method for filtering record like: Movie.bojects.filter() and here we can pass arbitrary keyword argument like, return all the movies with release year 1998. Movie.bojects.filter(release_year=1998). So when we call this django generates the SQL statement like this;
        i. SELECT * FROM movies_movie WHERE release_year=1998

    h. Also method for getting a single object: Movie.objects.get() and pass keyword argument; Let's we want to get movie id=1
    i. Aslo method for saving movie object or deleting them. Thess method represent the database abstraction api that simplify a lot of cases and sometime we deleing with complex queries and if these methods do not do what we need then  we can always send raw SQL statement for the database. Now for these project lets call the all movie objects:

        Codes:
                from django.shortcuts import render
                from django.http import HttpResponse
                # import Movie class
                from .models import Movie

                def index(request):
                  # simply write movie.objects.all() with this statement we get all the movie objects from the database
                  Movie.objects.all()
                  return HttpResponse("Hello Word")

    j. Now we will use list comprehension(syntext: [expresion, for item in list]) to get the title of these movies.

        Codes:
                from django.shortcuts import render
                from django.http import HttpResponse
                from .models import Movie

                def index(request):
                  Movie.objects.all()
                  [m.titles for m in movies]
                  return HttpResponse("Hello Word")
    
    k. So we have a list of string we can join these strings using a comma separator ', '.join() these can join all the elements in our list and return string. We can store this in a variable(output) and pass the outpu in HttpResponse() method.

        Codes:
                from django.shortcuts import render
                from django.http import HttpResponse
                from .models import Movie

                def index(request):
                  Movie.objects.all()
                  output = ', '.join([m.titles for m in movies])
                  return HttpResponse(output)

    l. Save the changes and reload the browser and we can see the movies are displaying on the /movies page with comma separated.

    Next step:11 is on Template, to show the data in better way using HTML markup.