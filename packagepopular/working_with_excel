Working with excel in Python:

Start with a new project in Python and the full steps fo the project are documented as below:

1. Create a new project:
        a. Open terminal and go to users: cd
        b. Create a new directory: mkdir pyexcel
        c. Go to the directory: cd pyexcel
        d. Open the directory in vscode: code .

2. Have an excel spreadsheet file and py file in the source directory:
        a. Create a excel spreadsheet with info in row and column 
        b. and keep the file in the source directory
        c. Create a py file in the source directory

3. Create virtual environment and install package together with pipenv:
        a. Create virtual env and install openpyxl: pipenv install openpyxl
        b. Select the virtual environment in vscode
        c. active the virtual environment: pipenv shell

4. Start codding:
        a. Import package:

                Codes:
                        import openpyxl

        b. When working with spreadsheet, we need to start with workbook object. We can either create an empty
           workbook in memory or load an exiting workbook on disc. So the openpyxl moduke has the Workbook class and we can create a new 'wb' object like this;

                Codes:
                        import openpyxl

                        wb = openpyxl.Workbook()
                        # Now we have an empty workbook with one sheet, later on this need to save on the disc
        
        c. The openpyxl module has another method load_workbook for an existing workbook, in this project we will 
           load an exiting workbook that already has been created in the source directory.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

        d. The wb object has an attribute called sheetnames, let's print this in terminal.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                Output: ['Sheet1'] 
        
        e. So this workbook we have only a single sheet, that is 'Sheet1'. Let's access that, this is pretty easy
           to use square brackets just like working with dictionary.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]
                        
        f. We can slso create a new sheet or remove an existing one. So the wb object has a couple of methods we
           should be aware of, one is create_sheet() here we pass the name of the new sheet. And optionaly we can pass second argument as index. For example we want to put the newly created sheet before the existiong one in this case we pass 0 as second argument. 

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        wb.create_sheet("Sheet2", 0)

                        # Save the new sheet in new xlsx file
                        wb.save("new_file.xlsx")

        g. We also have remove_sheet() method to delete sheet that takes sheet object and remove that sheet

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        wb.create_sheet("Sheet2", 0)

                        wb.remove_sheet(Sheet)

        h. Now go back to the sheet object so we have a sheet and we need to access an individual cell or a range 
           of cells using square brackets and pass the coordinate of a cell for example if we pass a1 that mean it referes colume A row 1 in the sheet or first column and first row and we get a cell object.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        # Now this cell object has few attributes one is value and we can print in the terminal.
                        print(cell.value)

                        # We can also change the value here
                        cell.value = 2

                        # We also have row, column, coordinate let's print them the terminal
                        print(cell.row)
                        print(cell.column)
                        print(cell.rcoordinate)


                OutPut: 
                        Sheet1
                        Column_header
                        1
                        A
                        A1

        i. We have another approach to access of an individual cell, and that is using the cell method of the
           sheet object. Let's see, so instead of using square brackets and passing the coordinate we can call sheet.cell() and pass a row and a cloumn like row 1 column 1 and we can pass these with keyword=argumet so that it is more readable and it returns the cell object exact like cell = sheet["a1"] 

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        cell = sheet.cell(row=1, column=1)

           cell = sheet["a1"] is more shorter and easy to use but we need the second approach when we are iterating over all the rows and columns and we want to dynamically access various cells. Let's see, the sheet has a couple of attributes max row, max coulmn print them in terminal.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        print(sheet.max_row)
                        print(sheet.max_coulmn)

                OutPut:
                        ['Sheet1']
                        3
                        4

           For example, so we have 3 rows and 4 coulmns in the Sheet1 now we can easily iterrate over them. So we can write a for loop like this;

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        for row in range(1, sheet.max_row + 1):
                          # this retunrs a number so we need to paas this to a range function
                          # We know this range function returns numbers starting from 0 so we need to put index 1
                          # since we do not have zero row. Row starts from 1
                          # Also for this reason we need increment this by 1 so we can access the last row
                          for column in range(1, sheet.max_coulmn + 1):
                            # Now we can call sheet.cell() and pass the row and column
                            cell =  sheet.cell(row, column)
                            # And print the value of the eech cell
                            print(cell.value)

                OutPut:
                        ['Sheet1']
                        coulmn_header_1
                        coulmn_header_2
                        column_header_3
                        vlaue_on_coulmn_header_1 in row 1
                        vlaue_on_coulmn_header_2 in row 1
                        vlaue_on_coulmn_header_3 in row 1
                        vlaue_on_coulmn_header_1 in row 2
                        vlaue_on_coulmn_header_2 in row 2
                        vlaue_on_coulmn_header_3 in row 2
                        vlaue_on_coulmn_header_1 in row 3
                        vlaue_on_coulmn_header_2 in row 3
                        vlaue_on_coulmn_header_3 in row 3

        j. Using square brackets we can also access range of cells here are few examples: We can access sheet of a 
           and that returns all the rows in column A and we store the result in coulmn and pirnt in terminal.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        column = sheet["a"]
                        print(coulmn)

                OutPut:
                        It returns a tuple with the cell objects like;
                        (<cell 'Sheet1'.A1>, <cell 'Sheet1'.A2>, <cell 'Sheet1'.A3>, <cell 'Sheet1'.A4>)

           We can aslo work with range of coulmn so sheet of A to C ["a:c"] and this will returns all the cells in all the columns in A to C. Now store this in cells object and print in the terminal.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        column = sheet["a"]
                        print(coulmn)

                        cells = sheet["a:c"]
                        print(cells)

                OutPut:
                        It returns tuple of tuples so each tuple of this tuple represents one column

        k. We can also use coordinate here, so sheet[a1:c3] let's say a1 to c3 and this retunrs all the area on
           coulmn A to C and row 1 to 3.

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        column = sheet["a"]
                        print(coulmn)

                        cells = sheet["a:c"]
                        print(cells)

                        sheet[a1:c3]

        l. And using the same technique we can access the cell in given row or a range of rows. Like, sheet[1]
           retunrs all the cells in the first row. Or if you use sheet[1:3] 1 to 3 it will return all the cells in row 1 to 3

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        column = sheet["a"]
                        print(coulmn)

                        cells = sheet["a:c"]
                        print(cells)

                        sheet[a1:c3] 

                        # Access cells in given row, this returns all cells in first row
                        sheet[1]

                        # Access cells in given range of rows, this returns all the cells in 1st, 2nd, and 3rd rows
                        sheet[1:3]

        m. Now this sheet object has few methods we should be aware of. One of them is append() we use this to add
           new row at the end of the sheet. And here we pass a list of tuple of value let's say ([1, 2, 3])

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        column = sheet["a"]
                        print(coulmn)

                        cells = sheet["a:c"]
                        print(cells)

                        sheet[a1:c3]

                        # Append method
                        sheet.append([1, 2, 3])

                        # we also have insert_rows() method and we use this to insert row in a given index
                        sheet.insert_rows()

                        # We also have insert column insert_cols()
                        sheet.insert_cols()

                        # Also have delte rows() and columns
                        sheet.delete_rows()
                        sheet.delete_cols()

                        # We can also add charts, sort, and filter data and so on. For detail see the documentation on openpyxl: https://pypi.org/project/openpyxl/

        n. Finaly let's save the workbook as a new file

                Codes:
                        import openpyxl

                        wb = openpyxl.load_workbook("file_name.xlsx")

                        print(wb.sheetnames)

                        sheet = wb["Sheet1"]

                        cell = sheet["a1"]

                        column = sheet["a"]
                        print(coulmn)

                        cells = sheet["a:c"]
                        print(cells)

                        sheet[a1:c3]

                        # Apped method
                        sheet.append([1, 2, 3])

                        # save the workbook
                        wb.save("new_file_name.xlsx")

           Now save the changes and run the program and see the new file is added in the source directory. And this sheet has a extra row of data 1, 2, 3.
            